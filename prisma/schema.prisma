generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model image {
  created     DateTime          @default(now()) @db.Timestamp(6)
  updated     DateTime          @default(now()) @db.Timestamp(6)
  deletedAt   DateTime?         @db.Timestamp(6)
  id          Int               @id(map: "PK_d6db1ab4ee9ad9dbe86c64e4cc3") @default(autoincrement())
  filename    String            @db.VarChar
  path        String            @db.VarChar
  mimetype    String            @db.VarChar
  userID      Int?              @unique(map: "REL_fc1e5cd7576b718c143d04c7e2")
  postID      Int?
  plantID     Int?
  imageSource String?           @db.VarChar
  status      image_status_enum @default(creating)
  plant       plant?            @relation(fields: [plantID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_6e5b050dcb332ab56adbcf3f7d1")
  post        post?             @relation(fields: [postID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_ff720d9d676712e11e0065a9b54")
}

model plant {
  created                   DateTime          @default(now()) @db.Timestamp(6)
  updated                   DateTime          @default(now()) @db.Timestamp(6)
  deletedAt                 DateTime?         @db.Timestamp(6)
  id                        Int               @id(map: "PK_97e1eb0d045aadea59401ece5ba") @default(autoincrement())
  title                     String?           @db.VarChar
  price                     Int?
  description               String?           @db.VarChar
  sellerID                  Int
  status                    plant_status_enum @default(creating)
  clientID                  Int?
  count                     Int               @default(1)
  user_plant_sellerIDTouser user              @relation("plant_sellerIDTouser", fields: [sellerID], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_a007946009348f879bcca4b5f9c")
  user_plant_clientIDTouser user?             @relation("plant_clientIDTouser", fields: [clientID], references: [id], onUpdate: NoAction, map: "FK_f9cdccc067183040fc47688d748")
  image                     image[]
  post                      post[]
}

model post {
  created                         DateTime         @default(now()) @db.Timestamp(6)
  updated                         DateTime         @default(now()) @db.Timestamp(6)
  deletedAt                       DateTime?        @db.Timestamp(6)
  id                              Int              @id(map: "PK_be5fda3aac270b134ff9c21cdee") @default(autoincrement())
  text                            String?          @db.VarChar
  authorID                        Int
  status                          post_status_enum @default(creating)
  commentedUserID                 Int?
  commentedPlantID                Int?
  plant                           plant?           @relation(fields: [commentedPlantID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_087c691364791a2171ab15a6707")
  user_post_authorIDTouser        user             @relation("post_authorIDTouser", fields: [authorID], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_2d82c4a1da8536f1dde0a75b8cc")
  user_post_commentedUserIDTouser user?            @relation("post_commentedUserIDTouser", fields: [commentedUserID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_b0a61573ce14285d3286c9b9a8b")
  image                           image[]
}

model user {
  id                              Int               @id(map: "PK_cace4a159ff9f2512dd42373760") @default(autoincrement())
  name                            String?
  email                           String?   @unique
  emailVerified                   DateTime?
  image                           String?
  accounts                        Account[]
  sessions                        Session[]
  created                         DateTime          @default(now()) @db.Timestamp(6)
  updated                         DateTime          @default(now()) @db.Timestamp(6)
  deletedAt                       DateTime?         @db.Timestamp(6)
  password                        String?           @db.VarChar
  phoneNumber                     Int?              @unique(map: "UQ_f2578043e491921209f5dadd080")
  firstName                       String?           @db.VarChar
  lastName                        String?           @db.VarChar
  roles                           user_roles_enum[] @default([])
  plant_plant_sellerIDTouser      plant[]           @relation("plant_sellerIDTouser")
  plant_plant_clientIDTouser      plant[]           @relation("plant_clientIDTouser")
  post_post_authorIDTouser        post[]            @relation("post_authorIDTouser")
  post_post_commentedUserIDTouser post[]            @relation("post_commentedUserIDTouser")
}

enum image_status_enum {
  published
  creating
}

enum plant_status_enum {
  published
  updating
  creating
  inBucket
  inOrder
  delivered
}

enum post_status_enum {
  published
  creating
  moderating
}

enum user_roles_enum {
  client
  seller
}

model Account {
  id                 String  @id @default(cuid())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user user @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}